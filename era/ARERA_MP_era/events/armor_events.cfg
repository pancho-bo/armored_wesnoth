 
# apply defense stance after first incoming attack
[event]
	name=attacker_hits, attacker_misses
	first_time_only=no

	[filter_second]
		[filter_wml]
			[variables]
			[arera]
				defense_stance=no
			[/arera]	
			[/variables]
		[/filter_wml]
	[/filter_second]

	{VARIABLE_OP second_unit.variables.arera.defense_stance value yes}
	{VARIABLE_OP second_unit.overlays value misc/arera-overlay.png}
	{CLEAR_VARIABLE unit.overlays}

	# {DEBUG_MSG "now defense stance is: $second_unit.variables.arera.defense_stance"}

	# damage correction for attack_end condition that can't recognize our new defense_stance
	# but for resting units it's no need for correcton
	[if]
		[variable]
			name=second_unit.moves
			not_equals=$second_unit.max_moves
		[/variable]
	[then]
		{FOREACH unit.attack i}
		{VARIABLE_OP unit.attack[$i].damage multiply "$(1.0-($second_unit.variables.arera.armor)/10.0)"}
		{NEXT i}
		# {DEBUG_MSG "extra correction for not resting for $(1.0-($second_unit.variables.arera.armor)/10.0)"}
		# {DEBUG_MSG "Unit was not resting, extra correction $unit.attack[0].damage $unit.attack[1].damage"}
	[/then]
	[/if]

	[unstore_unit]
		variable=second_unit
	[/unstore_unit]
	[unstore_unit]
		variable=unit
	[/unstore_unit]
[/event]

# set overlay icons in beginnig of each turn for all units on this side
[event]
	
	name=side_turn
	first_time_only=no
	
	[store_unit]
	[filter]
		side=$side_number
	[/filter]
	variable=all_side_units
	[/store_unit]

	{FOREACH all_side_units i}
		{VARIABLE_OP all_side_units[$i].overlays value misc/arera-overlay.png}
		[unstore_unit]
			variable=all_side_units[$i]
		[/unstore_unit]
	 {NEXT i}
	
	{CLEAR_VARIABLE all_side_units}

[/event]

# clear overlay icon on move
[event]

	name=moveto
	first_time_only=no

	{CLEAR_VARIABLE unit.overlays}	

	[unstore_unit]
		variable=unit
	[/unstore_unit]

[/event]


# restore all attacks at the start of turn
# TODO: maybe need something more complicated to restore non-1 defense_weight values
[event]

	name=side_turn
	first_time_only=no
	
	[store_unit]
	[filter]
		side=$side_number
		[and]
			[filter_wml]
				[variables]
				[arera]
					defense_stance=yes
				[/arera]
				[/variables]
			[/filter_wml]
		[/and]
	[/filter]

	variable=units_to_restore_attacks
	[/store_unit]

	 {FOREACH units_to_restore_attacks i}
	 	{VARIABLE_OP units_to_restore_attacks[$i].variables.arera.defense_stance value no}
		# {DEBUG_MSG "restore attacks for: $units_to_restore_attacks[$i].name"}
		{FOREACH units_to_restore_attacks[$i].attack j}
			{VARIABLE_OP units_to_restore_attacks[$i].attack[$j].defense_weight value 1}
		{NEXT j}
		
		[unstore_unit]
			variable=units_to_restore_attacks[$i]
		[/unstore_unit]
	 {NEXT i}
	
	{CLEAR_VARIABLE units_to_restore_attacks}

[/event]

# armor event, mitigate incoming damage
 [event]

 	name=attack
	first_time_only=no
 	
	# for resting units, and for units in defense stance
 	[filter_second]
		[filter_wml]
			moves=$this_unit.max_moves
		[/filter_wml]
		[or]
 		[filter_wml]
			[variables]
 			[arera]
 				defense_stance=yes
 			[/arera]
			[/variables]
 		[/filter_wml]
		[/or]
 	[/filter_second]

	{GET_DEFENSE x,y=$x2,$y2 current_defense}
	
	# formula to calcualte armor depending of terrain
	{VARIABLE current_defense "$((100-$current_defense)/10-4)"}
	# {DEBUG_MSG "current unit defense: $current_defense"}

	{VARIABLE_OP second_unit.variables.arera.armor value $second_unit.variables.arera.base_armor}
	{VARIABLE_OP second_unit.variables.arera.armor add $current_defense}
	# this prevent armor of the unit fall beyond 0. It can solve the issue that unit with low armor staying in the river actually take more damage when in defense_stance.
	#[if]
	#	[variable]
	#		name=second_unit.variables.arera.armor
	#		less_than=0
	#	[/variable]
	#	[then]
	# 	{DEBUG_MSG "fixing armor to 0"}
	#	{VARIABLE_OP second_unit.variables.arera.armor value 0}
	#	[/then]
	#[/if]
	# {DEBUG_MSG "current unit armor: $second_unit.variables.arera.armor"}
 
	{CLEAR_VARIABLE unit.overlays}

	{FOREACH unit.attack i}
 	{VARIABLE_OP unit.attack[$i].damage multiply "$(1.0-($second_unit.variables.arera.armor)/10.0)"}
	{NEXT i}
	# {DEBUG_MSG "mitigated: $second_unit.variables.arera.armor damage"}
	# {DEBUG_MSG "Defender is in defense or rest, attack now: $unit.attack[0].damage $unit.attack[1].damage"}

	{CLEAR_VARIABLE current_defense}

	{VARIABLE current_armor $second_unit.variables.arera.armor}
	{VARIABLE armor_text ""}
	{VARIABLE at_color_red 128}
	{VARIABLE at_color_green 128}
	{VARIABLE at_color_blue 128}
	
	[if]
		[variable]
			name=current_armor
			greater_than=0
		[/variable]
		[then]
			{VARIABLE_OP at_color_red value 0}
			{VARIABLE_OP at_color_green value 255}
			{VARIABLE_OP at_color_blue value 255}
			{VARIABLE_OP armor_text value "       -$current_armor"}
		[/then]
	[else]
		[if]
		[variable]
			name=current_armor
			less_than=0
		[/variable]
		[then]
			{VARIABLE_OP at_color_red value 255}
			{VARIABLE_OP at_color_green value 128}
			{VARIABLE_OP at_color_blue value 64}
			{VARIABLE_OP current_armor value "$(-($current_armor))"}
			{VARIABLE_OP armor_text value "       +$current_armor"}
		[/then]
		[/if]
	[/else]
	[/if]

 	[unstore_unit]
 		variable=unit
 	[/unstore_unit]
 	[unstore_unit]
		text="$armor_text"
		red,green,blue=$at_color_red,$at_color_green,$at_color_blue
 		variable=second_unit
 	[/unstore_unit]

	{CLEAR_VARIABLE armor_text,current_armor,at_color_red,at_color_green,at_color_blue}
 	
 [/event]

# restore attacker damage after mitigating
[event]

	name=attack_end
	first_time_only=no
	
 	[filter_second]
 		[filter_wml]
			[variables]
 			[arera]
 				defense_stance=yes
 			[/arera]
			[/variables]
 		[/filter_wml]
 	[/filter_second]

	# maybe it's better to  take brand new unit, to restore damage from it
	# now restoring damage by armor arithmetic, should result in pre_attack unit damage
	{FOREACH unit.attack i}
	{VARIABLE_OP unit.attack[$i].damage divide "$(1.0-($second_unit.variables.arera.armor)/10.0)"}
	{NEXT i}

	# {DEBUG_MSG "return: $second_unit.variables.arera.armor damage"}
	# {DEBUG_MSG "Defender was in defense, revert attack to: $unit.attack[0].damage $unit.attack[1].damage"}
	
	[unstore_unit]
		variable=unit
	[/unstore_unit]
	
[/event]
